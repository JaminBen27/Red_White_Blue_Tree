    //This function returns the tree position of a node with the value you
    //pass into the function. Otherwise, it throws an exception if node does not exist.
    //It should be part of the RBT Class as a public function
    int getNodePosition(int val){
        node* currNode = root;
        bool found = false;
        int position = 0;

        if (currNode!=nullptr) {
            position = 1; //currNode starts at root, at position 1

            //CurrNode searches for the value, updating position based on if it goes left
            //or right. Going left makes position*=2, whereas going right doubles position
            //and adds 1.
            while (currNode->data!=-1 and !found) {
                if(val<currNode->data){
                    currNode = currNode->left;
                    position *= 2;
                }
                else if(val > currNode->data){
                    currNode = currNode->right;
                    position = (2*position) + 1;
                }
                else{ //the value has been found
                    found = true;
                }
            }
            
        }

        if(!found) position = -1;
        
        return position;
    }
